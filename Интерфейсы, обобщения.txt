1. Интерфейсы содержат неявно абстрактные методы, которые не имеют реализации, но заставляют совершить такую в классах, которые наследуют интерфейс. 
Классы могу наследовать множество интерфейсов, тогда как класс только один.
В интерфейсах могут быть релизованы свойства, методы, индексаторы и события (которые я не понял). 
Интерфейсы позволяют при помощи общей спецификации объединять классы, что поможет для субледения DRY, ведь код не будет повторяться,
также общее поведение может быть легко реализованно при помощи интерфейса, вместо отдельного обращения к каждому классу.
2. Обобщения позволяют создавать шаблон для различных типов данных (или ограниченный их круг при помощи спец. модификатор where).
Вместо того, чтобы расписовать для каждого типа данных свой собственный конструктор класса, можно создать один общий с шаблонами. 
К примеру, если мы хотим, чтобы id игрока мог быть принят и как Guid и как string. 
Также в обобщениях нет распаковки и упаковки, т.к. тип хоть и не указан здесь и сейчас, но будет указан позже, 
соответственно, безопасность использования чего бы то ни было с шаблонами повышается. 
